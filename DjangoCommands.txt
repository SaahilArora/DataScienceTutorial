setup django project command :

1. Install virtual enviroment:  			pip install virtualenv
2. Start venv: 								\Scripts\activate
3. Leaving the virtual environment:			deactivate
4. Install Django: 							pip install Django
5. Check django version:					python django --version
6. Creating a project:						django-admin startproject mysite
7. Run development server:					python manage.py runserver (python manage.py runserver 8080)
8. Creating the Polls app:					python manage.py startapp polls

9. Write your first view:			

   Let’s write the first view. Open the file polls/views.py and put the following Python code in it:
   from django.http import HttpResponse

	def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")

10. In the polls/urls.py file include the following code:
	
	from django.urls import path
	from . import views

	urlpatterns = [
	    path('', views.index, name='index'),
	]

11. In mysite/urls.py, add an import for django.urls.include and insert an include() in the urlpatterns			list, so you have:

	from django.contrib import admin
	from django.urls import include, path

	urlpatterns = [
	    path('polls/', include('polls.urls')),
	    path('admin/', admin.site.urls),
	]

12. Database setup
	Some of these applications make use of at least one database table, though, so we need to create the tables in the database before we can use them. To do that, run the following command:

	python manage.py migrate

13. Creating models
	A model is the single, definitive source of truth about your data. It contains the essential fields and behaviors of the data you’re storing.
	
	polls/models.py 

	from django.db import models


	class Question(models.Model):
	    question_text = models.CharField(max_length=200)
	    pub_date = models.DateTimeField('date published')


	class Choice(models.Model):
	    question = models.ForeignKey(Question, on_delete=models.CASCADE)
	    choice_text = models.CharField(max_length=200)
	    votes = models.IntegerField(default=0)

14. Activating models:
	
	Create a Python database-access API for accessing Question and Choice objects.

	Edit the mysite/settings.py file and add that dotted path to the INSTALLED_APPS setting.

	INSTALLED_APPS = [
    'polls.apps.PollsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
	]

15. Now Django knows to include the polls app. Let’s run another command:
	
	python manage.py makemigrations polls

16. python manage.py sqlmigrate polls 0001

17. multiple migrations into one
	How to squach migrations in Django ?
	- 0004_change_4
	manage.py squashmigrations myApp 0004

18. Run makemigrations again (this will add a new migration file in migrations folder that add the newfield 	to db):
	./manage.py makemigrations myapp
	Run migrate again:
	./manage.py migrate myapp



